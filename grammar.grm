%%
%term
    EOF
  | ID of string
  | NUM of int
  | STR of string
  | INT
  | STRING
  | PLUS | MINUS | TIMES | DIVIDE | MOD | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | UMINUS | NEG
  | TRUE | FALSE
  | IF | THEN | ELSE | WHILE | FOR | DO | END
  | BREAK | CONTINUE | SEMICOLON | PRINT

%nonterm program of Ast.program
       | stmnts of Ast.statement list
       | statement of Ast.statement
       | expr of Ast.expr
       | expterm of Ast.expr
       | binOp of Ast.binOp
       | uniOp of Ast.uniOp
       | dataType of Ast.dataType

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%keyword WHILE FOR BREAK IF THEN ELSE

%prefer THEN ELSE

%name Foo

%nonassoc DO
%nonassoc ELSE
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIVIDE

%%

program	: stmnts                                 (Ast.Program stmnts)

stmnts : statement SEMICOLON stmnts	            (statement :: stmnts)
	     | statement							                ([statement])
       | FOR statement SEMICOLON expr
         SEMICOLON statement DO stmnts END      (statement ::
                                                 [Ast.While(expr,stmnts @
                                                            [statement])])

statement : ID ASSIGN expr                      (Ast.VarAssn(Ast.ID ID, expr))
          | dataType ID                         (Ast.VarDecl(dataType, Ast.ID ID))
          | PRINT expr                          (Ast.Print expr)
          | WHILE expr DO stmnts END            (Ast.While(expr, stmnts))
          | DO stmnts WHILE expr END            (Ast.DoWhile(stmnts, expr))
          | IF expr THEN stmnts END             (Ast.IFT(expr, stmnts))
          | IF expr THEN stmnts ELSE stmnts END (Ast.IFTE(expr, stmnts, stmnts))
          | CONTINUE                            (Ast.Continue)
          | BREAK                               (Ast.Break)

expr : uniOp expr          (Ast.Up(uniOp, expr))
     | expterm binOp expr  (Ast.Op(expterm, binOp, expr))
	   | expterm				     (expterm)

expterm : NUM                   (Ast.Const NUM)
        | STR                   (Ast.Str STR)
        | TRUE                  (Ast.Bool Ast.TRUE)
        | FALSE                 (Ast.Bool Ast.FALSE)
        | ID					          (Ast.Id(Ast.ID ID))

binOp : PLUS                (Ast.Plus)
      | MINUS               (Ast.Minus)
      | TIMES               (Ast.Times)
      | DIVIDE              (Ast.Divide)
      | MOD                 (Ast.Mod)
      | EQ                  (Ast.Eq)
      | NEQ                 (Ast.Neq)
      | LT                  (Ast.Lt)
      | LE                  (Ast.Le)
      | GT                  (Ast.Gt)
      | GE                  (Ast.Ge)

uniOp : NEG                 (Ast.Neg)
      | UMINUS              (Ast.UMinus)

dataType : INT              (Ast.Int)
         | STRING           (Ast.String)
