%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | LPAREN | RPAREN | LBRACE | RBRACE
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | IF | THEN | ELSE | WHILE | FOR | DO
  | FUNCTION | BREAK | VAR | SEMICOLON

%nonterm
	statement | program | lval | assignment | mathop | whileloop | ifthenelse
  | boolop | stmnts | fundef | param

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%keyword WHILE FOR BREAK VAR IF THEN ELSE

%prefer THEN ELSE LPAREN

%name foo

%nonassoc DO
%nonassoc ELSE
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIVIDE


%%
program	: stmnts                            (Ast.program program)

stmnts: statement SEMICOLON stmnts	        (Ast.statement statement :: stmnts)
	|statement SEMICOLON				    (Ast.statement statement)

statement : ID ASSIGN expr                  (Ast.assign ID expr)
          | INT ID                          (Ast.decl INT ID)
          | WHILE expr DO stmnts            (Ast.While(expr, stmnts))(*Edit*)
          | DO stmnts WHILE expr            (Ast.DoWhile(statement, expr))
          | IF expr THEN stmnts             (Ast.IFT(expr, stmnts))
          | IF exp THEN stmnts ELSE stmnts  (Ast.IFTE(expr, stmnts, stmnts))
          | Continue                        (Ast.Continue)
          | Break                           (Ast.Break)


expr : 	ID				()
     |	INT				()
     |	STRING			()

mathop:	exp PLUS exp	()
	|	exp MINUS exp	()
	|	exp TIMES exp	()
	|	exp DIVIDE exp	()


boolop:
		exp EQ exp 			()
	|	exp NEQ exp			()
	|	exp GT exp 			()
	|	exp LT exp 			()
	|	exp GE exp 			()
	|	exp LE exp 			()
	|	exp AND exp			()
	|	exp OR exp 			()

