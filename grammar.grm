%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | LPAREN | RPAREN | LBRACE | RBRACE
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | IF | THEN | ELSE | WHILE | FOR | DO | END 
  | FUNCTION | BREAK | VAR | SEMICOLON

%nonterm
	statement | program | lval | assignment | mathop | whileloop | ifthenelse
  | boolop | stmnts | fundef | param

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%keyword WHILE FOR BREAK VAR IF THEN ELSE

%prefer THEN ELSE LPAREN

%name foo

%nonassoc DO
%nonassoc ELSE
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIVIDE

%%

program	: stmnts                                (Ast.Program program)

stmnts: statement SEMICOLON stmnts	            (Ast.statement statement :: stmnts)
	|statement SEMICOLON				        (Ast.statement statement)

statement : ID ASSIGN expr                      (Ast.assign ID expr)
          | dataType ID                         (Ast.decl dataType ID)(*Edit*)
          | WHILE expr DO stmnts END            (Ast.While(expr, stmnts))(*Edit*)
          | DO stmnts WHILE expr END            (Ast.DoWhile(statement, expr))
          | IF expr THEN stmnts END             (Ast.IFT(expr, stmnts))
          | IF expr THEN stmnts ELSE stmnts END  (Ast.IFTE(expr, stmnts, stmnts))
          | Continue                            (Ast.Continue)
          | Break                               (Ast.Break)

expr :  INT                 (Ast.Const INT) (*Edit*)
     |  ID                  (Ast.Bool)
     |  expr binOp expr     (Ast.Op(expr, binOp, expr))
     |  uniOp expr          (Ast.Up(uniOp, expr))
     
binOp : PLUS                (Ast.Plus)
      | MINUS               (Ast.Minus)
      | TIMES               (Ast.Times)
      | DIVIDE              (Ast.Divide)
      | MOD                 (Ast.Mod)
      | EQ                  (Ast.Eq)
      | NEQ                 (Ast.Neq)
      | LT                  (Ast.Lt)
      | LE                  (Ast.Le)
      | GT                  (Ast.Gt)
      | GE                  (Ast.Ge)

uniOp : NEG                 (Ast.Neg)
      | UMINUS              (Ast.UMinus)

